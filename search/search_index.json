{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#map-everything-with-kmap-a-flexible-and-powerful-compose-multiplatform-mapping-library","title":"Map everything with KMaP: A flexible and powerful compose multiplatform mapping library","text":""},{"location":"#checkout-the-demo-app-on-wasm-target-kmap-demo","title":"Checkout the demo app on wasm target: KMaP Demo.","text":""},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Cross-Platform Compatibility: Use a single KMaP Composable in your common code for a consistent user experience across all platforms.</li> <li>Interactive Elements: Features like zooming, panning, and rotating maps.</li> <li>Marker and Popup Support: Adding markers, popups, and tooltips to maps for enhanced interactivity.</li> <li>Layer Management: Support for multiple layers.</li> <li>Clustering: Visualizing data density with clustering markers.</li> <li>Offline Maps: Ability to use maps without an internet connection.</li> <li>Projection Support: Handling different map projections and coordinate systems.</li> <li>Performance: Efficient rendering and handling of large datasets.</li> <li>Easy Integration: Seamlessly integrate KMaP into your existing compose projects.</li> <li>Customizable: Tailor the map's behavior to fit your needs.</li> </ul>"},{"location":"#usage-example","title":"Usage Example","text":"<p>With KMaP, you don't need a mapping source for each platform. Here's a simple example to get you started:</p> <pre><code>val mapState = rememberMapState(mapProperties = SimpleMapProperties())\nKMaP(\n    modifier = Modifier.fillMaxSize(),\n    mapState = mapState,\n) {\n    canvas(\n        parameters = CanvasParameters(id = 1, tileSource = SimpleMapTileSource()::getTile),\n        gestureWrapper = MapGestureWrapper(\n            onGesture = { centroid, pan, zoom, rotation -&gt;\n                mapState.motionController.move {\n                    rotateByCentered(rotation.toDouble(), centroid)\n                    zoomByCentered(zoom, centroid)\n                    positionBy(pan)\n                }\n            },\n        )\n    )\n}\n</code></pre>"},{"location":"setup/","title":"Setup","text":"<ol> <li> <p>Add Maven Central to your repositories if needed</p> <pre><code>repositories {\n    mavenCentral()\n}\n</code></pre> </li> <li> <p>Add the desired dependencies to your module's <code>build.gradle</code> file</p> </li> </ol> DependenciesVersion Catalog <pre><code>sourceSets {\n    commonMain.dependencies {\n        implementation(\"com.rafambn:kmap:0.3.0\")\n    }\n}\n</code></pre> <pre><code>[versions]\n\nkmap = \"0.3.0\"\n\n\n[libraries]\n\nkmap = { module = \"com.rafambn:KMaP\", version.ref = \"kmap\" }\n</code></pre> <p>Current version here.</p>"},{"location":"upcoming/","title":"Upcoming","text":"<p>The following items will eventually be implemented:</p> <ul> <li>Tile theming application:<ul> <li>Parser for rendering Tiles</li> <li>Custom Tile Generation API</li> </ul> </li> <li>Non-tiled Canvas</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>Here is a basic implementation of KMaP where it uses the OpenStreetMap tile generation to show the map on the screen.</p> <p>You can encounter a demoApp on the KMaP Repo. </p> <pre><code>val mapState = rememberMapState(mapProperties = SimpleMapProperties())\nKMaP(\n    modifier = Modifier.fillMaxSize(),\n    mapState = mapState,\n) {\n    canvas(\n        parameters = CanvasParameters(id = 1, tileSource = SimpleMapTileSource()::getTile),\n        gestureWrapper = MapGestureWrapper(\n            onGesture = { centroid, pan, zoom, rotation -&gt;\n                mapState.motionController.move {\n                    rotateByCentered(rotation.toDouble(), centroid)\n                    zoomByCentered(zoom, centroid)\n                    positionBy(pan)\n                }\n            },\n        )\n    )\n}\n</code></pre>"},{"location":"usage/#how-it-works","title":"How it Works","text":"<p>There are four parts of the KMaP: MotionController, MapState, LazyCanvas, and the KMaPContent.</p> <ul> <li>MotionController: Handle the movement of the map like zooming, panning, and rotating for either user or app input.</li> <li>MapState: Control all properties of the map and defines the visible tiles for canvas rendering.</li> <li>LazyCanvas: Place each composable defined on KMaPContent on the layout.</li> <li>KMaPContent: Based on the user provided components: canvas, marker, cluster, and path. Creates the necessary composable for a map to work.</li> </ul>"},{"location":"usage/#mapstate","title":"MapState","text":"<p>This is where almost all the important stuff is. It expects an implementation MapProperties interface that will tell how the map will behave, for example, tile size, zoom level and projection transformation function. <pre><code>interface MapProperties {\n    val boundMap: BoundMapBorder\n    val outsideTiles: OutsideTilesType\n    val zoomLevels: ZoomLevelRange\n    val coordinatesRange: CoordinatesRange\n    val tileSize: TileDimension\n\n    fun toProjectedCoordinates(coordinates: Coordinates): ProjectedCoordinates\n\n    fun toCoordinates(projectedCoordinates: ProjectedCoordinates): Coordinates\n}\n</code></pre> It will also hold the angle, zoom, position variables that can be used by the user to display map info. The MapState also calculates the visible tiles so that each canvas could render its own images. <pre><code>data class CameraState(\n    val canvasSize: ScreenOffset = ScreenOffset.Zero,\n    val zoom: Float = 0F,\n    val angleDegrees: Double = 0.0,\n    val coordinates: Coordinates,\n)\n</code></pre></p>"},{"location":"usage/#motioncontroller","title":"MotionController","text":"<p>It's responsible for handling the movement of the map like zooming, panning, and rotating for either user input or app input.</p> <p>It has three movement options:</p> <ul> <li>Move: This will set/add/remove the provided values on the map parameters</li> <li>Animate: This will animate the map parameters to the provided value</li> </ul> <p>While Move is Synchronous the Animate is Async and thus must be launched from a coroutine.</p>"},{"location":"usage/#reference","title":"Reference","text":"<p>Before seeing how to move and animate, you have to be aware of how the reference system works. It's an open class that implements all necessary types of reference points on the screen.</p> <pre><code>open class Reference\n\nclass ScreenOffset : Reference\nclass TilePoint : Reference\nclass Coordinates : Reference\nclass ProjectedCoordinates : Reference\nclass DifferentialScreenOffset : Reference\n</code></pre> <ul> <li>ScreenOffset represents a screen offset with (0, 0) located on the top-left part of the main KMaP composable</li> <li>TilePoint represents a point on the map with projection and scaled to the tile</li> <li>Coordinates represent a coordinate of the map</li> <li>ProjectedCoordinates represent a coordinate of the map with its projection</li> <li>DifferentialScreenOffset is the same as ScreenOffset but is differential</li> </ul>"},{"location":"usage/#move","title":"Move","text":"<p>Move has its own scoped interface, so it can only perform the following actions</p> <pre><code>interface MoveInterface {\n    fun positionTo(center: Reference)\n    fun positionBy(center: Reference)\n    fun zoomTo(zoom: Float)\n    fun zoomBy(zoom: Float)\n    fun zoomToCentered(zoom: Float, center: Reference)\n    fun zoomByCentered(zoom: Float, center: Reference)\n    fun rotateTo(degrees: Double)\n    fun rotateBy(degrees: Double)\n    fun rotateToCentered(degrees: Double, center: Reference)\n    fun rotateByCentered(degrees: Double, center: Reference)\n}\n</code></pre> <p>Here are some examples of how to Set with MotionController. *See the comments to fully understand what each line does</p> <pre><code>mapState.motionController.move {\n    positionTo(ScreenOffset.Zero)  # (1)!\n    positionTo(TilePoint.Zero) # (2)!\n    positionTo(Coordinates.Zero) # (3)!\n    zoomBy(5F) # (4)!\n    zoomToCentered(7F, TilePoint.Zero) # (5)!\n    rotateByCentered(45.0, ScreenOffset.Zero) # (6)!\n}\n</code></pre> <ol> <li>Center the current-provided point of the screen in the center of the screen</li> <li>Center provided position of the canvas, without projection, in the center of the screen</li> <li>Center provided projection in the center of the screen</li> <li>Set the zoom amount</li> <li>Set the zoom amount while maintaining the provided point of the same place on the screen</li> <li>Rotate the canvas around a provided pivot point</li> </ol>"},{"location":"usage/#animate","title":"Animate","text":"<p>Now here is the scoped interface with the functions that can be implemented with Animate and an example</p> <pre><code>interface AnimateInterface {\n    suspend fun positionTo(center: Reference, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun positionBy(center: Reference, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun zoomTo(zoom: Float, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun zoomBy(zoom: Float, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun zoomToCentered(zoom: Float, center: Reference, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun zoomByCentered(zoom: Float, center: Reference, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun rotateTo(degrees: Double, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun rotateBy(degrees: Double, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun rotateToCentered(degrees: Double, center: Reference, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n    suspend fun rotateByCentered(degrees: Double, center: Reference, animationSpec: AnimationSpec&lt;Float&gt; = SpringSpec())\n}\n</code></pre> <p>Animate has similar scoped functions to move with a key difference; it adds an animationSpec where you can define how the animation will be performed.</p> <pre><code>scope.launch {\n        mapState.motionController.animate {\n        positionTo(Coordinates(0.0, 0.0), TweenSpec(2000))\n        positionTo(Coordinates(180.0, 90.0), TweenSpec(2000))\n        positionTo(Coordinates(45.0, 0.0), TweenSpec(2000))\n        zoomBy(1F, TweenSpec(2000))\n        zoomBy(-1F, TweenSpec(2000))\n        zoomToCentered(1F, Coordinates(0.0, 0.0), TweenSpec(2000))\n        rotateBy(360.0, TweenSpec(2000))\n    }\n    mapState.motionController.animate {\n        rotateByCentered(-360.0, Coordinates(0.0, 0.0), TweenSpec(2000))\n    }\n}\n</code></pre>"},{"location":"usage/#canvas","title":"Canvas","text":"<p>The Canvas function usable in the KMaP scope is just a wrapper on the native canvas so that we can handle the render  process needing you to provide the source tile implementing the following api.</p> <pre><code>interface TileSource {\n    suspend fun getTile(zoom: Int, row: Int, column: Int): TileRenderResult\n}\n</code></pre> <p>With this function you can render any tilled map you want. Maybe you want a free map of the world with OSM, or don't  like to use a Google library but want to use its tiles, or render it on the device, or read from a local file for your  Skyrim map (I'm old sorry xD) with this you can do it all.</p> <p>It's provided a MapGestureWrapper with a some gesture that later will be attributed on a pointerInputScope</p> <pre><code>MapGestureWrapper(\n    onDoubleTap = { offset -&gt; motionController.move { zoomByCentered(-1 / 3F, offset) } },\n    onTapSwipe = { zoomChange, rotationChange -&gt;\n        motionController.move {\n            zoomBy(zoomChange / 120)\n            rotateBy(rotationChange)\n        }\n    },\n    onTwoFingersTap = { offset -&gt; motionController.move { zoomByCentered(1 / 3F, offset) } },\n    onGesture = { centroid, pan, zoom, rotation -&gt;\n        motionController.move {\n            rotateByCentered(rotation.toDouble(), centroid)\n            zoomByCentered(zoom / gestureScale, centroid)\n            positionBy(pan)\n        }\n    },\n    onScroll = { mouseOffset, scrollAmount -&gt; motionController.move { zoomByCentered(scrollAmount / scrollScale, mouseOffset) } },\n)\n</code></pre> <p>See https://wiki.openstreetmap.org/wiki/Slippy_map to better understand how it works.</p>"},{"location":"usage/#markers","title":"Markers","text":"<p>Markers are a powerful way to draw anything on the map, instead of a bitmap or vector, like other libraries, it uses composable instead this way you draw whatever you want. Declare it on the KMaP Scope for it to work.</p> <pre><code>marker(\n    marker = MarkerParameters(\n        Coordinates(0.0, 0.0),\n        drawPosition = DrawPosition.TOP_RIGHT,\n    )\n) {\n    Text(\n        text = \"Fixed size\",\n        modifier = Modifier\n            .background(Color.Black)\n            .padding(16.dp),\n        color = Color.White\n    )\n}\n</code></pre> <p>Use the markers() API to draw a list of markers with the provided composable, you can set up a bunch of them with this. There are a lot of options on how to handle your marker. Fell free to toy with them. Bellow is the data class that stores the options and its default values.</p> <pre><code>open class MarkerParameters(\n    val coordinates: Coordinates,\n    val alpha: Float = 1F,\n    val drawPosition: DrawPosition = DrawPosition.TOP_LEFT,\n    val zIndex: Float = 2F,\n    val zoomVisibilityRange: ClosedFloatingPointRange&lt;Float&gt; = 0F..Float.MAX_VALUE,\n    val zoomToFix: Float? = null,\n    val rotateWithMap: Boolean = false,\n    val rotation: Degrees = 0.0,\n    val clusterId: Int? = null\n) : Parameters\n</code></pre>"},{"location":"usage/#clusters","title":"Clusters","text":"<p>With cluster, you can merge markers if they are overlying, for example. Declare it on the KMaP scope with the clusterId of the markers you want to cluster for it to work.</p> <pre><code>cluster(\n    ClusterParameters(id = 1)\n) {\n    Text(\n        text = \"Cluster tag 1\",\n        modifier = Modifier\n            .background(Color.Green)\n            .padding(16.dp),\n        color = Color.White\n    )\n}\n</code></pre> <p>Cluster composable do not behave the same as the markers, so you have to provide how it will behave with its parameters. Here is the data class with the options.</p> <pre><code>open class ClusterParameters(\n    val id: Int,\n    val alpha: Float = 1F,\n    val zIndex: Float = 2F,\n    val rotateWithMap: Boolean = false,\n    val rotation: Degrees = 0.0\n) : Parameters\n</code></pre>"},{"location":"usage/#path","title":"Path","text":"<p>Paths are similar to markers in regards that they are also composable. The key difference is that for it to be \"clickable\" due to the nature of Compose, you need it to  have a pointerInputScope that also shares its inputs with its siblings, otherwise you will click outside the path and the map won't respond to your click.  Check the SharedSuspendingPointerInput file on the project if you want to dive onto how it works.</p> <pre><code>val path1 = PathData {\n    moveTo(0F, 0F)\n    lineTo(180F, -80F)\n    lineTo(90F, -80F)\n    lineTo(90F, 0F)\n}.toPath()\npath(\n    parameters = PathParameters(\n        path = path1,\n        color = Color.Red,\n        style = Stroke(\n            width = 4F,\n            cap = StrokeCap.Round,\n            join = StrokeJoin.Round,\n            pathEffect = PathEffect.dashPathEffect(floatArrayOf(10f, 10f), 0f)\n        ),\n    ),\n    gestureWrapper = PathGestureWrapper(\n        onTap = {\n            markerCoordinates = with(mapState) {\n                it.toTilePoint().toCoordinates()\n            }\n        },\n    )\n)\n</code></pre> <p>\u26a0\ufe0f Important Note:  When defining path coordinates, you must use projected coordinates. The path points need to be in the same coordinate system as your map projection to render correctly on the canvas.</p> <p>Similar to canvas, there are also gestures for the path that can be used.</p> <pre><code>data class PathGestureWrapper(\n    val onTap: ((ProjectedCoordinates) -&gt; Unit)? = null,\n    val onDoubleTap: ((ProjectedCoordinates) -&gt; Unit)? = null,\n    val onLongPress: ((ProjectedCoordinates) -&gt; Unit)? = null,\n    val onHover: ((ProjectedCoordinates) -&gt; Unit)? = null,\n)\n</code></pre>"}]}